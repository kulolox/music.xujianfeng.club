{"version":3,"sources":["pages/album/index.module.less","utils/tool.ts","pages/album/index.tsx"],"names":["module","exports","arraySplit","arr","step","len","length","rec","i","push","slice","Album","props","dispatch","useDispatch","useState","match","params","id","songListData","setSongListData","loading","setLoading","album","useSelector","state","getSongsUrl","useCallback","list","a","data","cacheAlbumSongList","localStorage","getItem","JSON","parse","request","map","t","getSongUrl","Promise","all","result","index","url","setItem","stringify","setList","cacheSongList","setSongList","canPlayList","filter","initData","getAlbumList","trackIds","formatIds","join","requests","ids","getSongList","songs","privileges","forEach","concat","name","seconds","dt","authors","ar","j","coverImgUrl","al","picUrl","canPlaying","privilege","st","fee","getAlbumInfo","getAlbumDetail","playlist","info","albumId","nickname","creator","description","tags","setInfo","playSong","getSongUrlById","playSongById","findIndex","useEffect","className","styles","head","logo","img","src","alt","main","color","buttonGroup","size","icon","PlayCircleOutlined","onClick","PlusSquareOutlined","tag","key","descript","listBox","title","dataSource","renderItem","item","Item","songName","songCreator","second","Duration","type","disabled","visibilityHeight"],"mappings":"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","file":"static/js/7.edf10bde.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"album\":\"_2hzivxDtZ7Lpvgv_X6pVe_\",\"head\":\"_2G7dEGYEINlmoML5hs1NhP\",\"logo\":\"_1XpWqywhwbUYPRNTj_2SwZ\",\"img\":\"SjhxsrVLLEEskJ03LfpEl\",\"main\":\"_1-lryxsU1rMvVjdxnaLMSB\",\"name\":\"_1TgPIWbSRfEXB5K_PytIj-\",\"nickname\":\"_1jILlatWTSWRHiqXAiGlp6\",\"buttonGroup\":\"_2oNF_eCmWK3wXiMEX8ipq8\",\"tags\":\"_2NXyU-l3NDvjYBWcqg7rAo\",\"listBox\":\"_380ztTIKx73V2U9a6z6OTk\",\"title\":\"_2R7Lx1geUI8ZuUW1MaR26i\",\"item\":\"_1UK-h9FidD_9NTxhMCLDzD\",\"index\":\"_3FrKiNJzzQaolrCA5-D_lD\",\"songName\":\"_2b0O4qR1U949NuqZHG0rDW\",\"songCreator\":\"_2Ekk2V7bfLi-WIEHRrawnv\",\"second\":\"_3HGrHnDeHpZumNXgIB0ahX\",\"canPlaying\":\"_3B08xlREDZ2TTBjaHLS8na\"};","/**\n * 返回当前路径中uri的指定参数\n * @param {string} name\n * @return {string|null}\n */\nexport function getUrlParam(name: string) {\n  const reg = new RegExp(`(^|&)${name}=([^&]*)(&|$)`); // 构造一个含有目标参数的正则表达式对象\n  const r = window.location.search.substr(1).match(reg); // 匹配目标参数\n  if (r != null) return decodeURIComponent(r[2]);\n  return null; // 返回参数值\n}\n\n/**\n * 判断音乐是否可以播放\n * @param {Object} privileges 原始字符串\n * @returns {Boolean}\n */\nexport const checkMusic = (privilege: any) => {\n  return (\n    privilege.st !== -1 &&\n    privilege.st !== -200 &&\n    privilege.fee !== 1 &&\n    privilege.fee !== 4 &&\n    privilege.fee !== 16\n  );\n};\n\n/**\n * 数组分片，当数组长度超过step时，以step为步长分片数组\n * @param {Array} arr\n * @param {Number} step 分片步长\n */\nexport const arraySplit = (arr: any, step = 20) => {\n  const len = arr.length;\n  const rec = [];\n  if (len <= step) {\n    return [arr];\n  }\n  for (let i = 0; i < len; i += step) {\n    rec.push(arr.slice(i, i + step));\n  }\n  return rec;\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Tag, List, Button, BackTop } from 'antd';\nimport { PlusSquareOutlined, PlayCircleOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { IInfo, IList, setInfo, setList } from '@/store/albumSlice';\nimport { getAlbumDetail, getSongList, getSongUrl } from '@/api';\nimport { arraySplit, checkMusic } from '@/utils/tool';\nimport Duration from '@/components/Duration';\nimport { RootState } from '@/store/rootReducer';\nimport { getSongUrlById } from '@/store/playerSlice';\nimport styles from './index.module.less';\nimport { setSongList } from '@/store/playerSlice';\n\nconst Album = (props: any) => {\n  const dispatch = useDispatch();\n  const [id] = useState(props.match.params.id);\n  const [songListData, setSongListData] = useState<IList[]>([]);\n  const [loading, setLoading] = useState(true);\n  const album = useSelector((state: RootState) => state.album);\n\n  // 获取所有歌曲播放链接\n  const getSongsUrl = useCallback(\n    async (list: IList[]) => {\n      // 添加歌曲缓存机制,以专辑id为key\n      let data: IList[] = [];\n      const cacheAlbumSongList = localStorage.getItem(id) || null;\n      if (cacheAlbumSongList) {\n        data = JSON.parse(cacheAlbumSongList);\n      } else {\n        const request = list.map(t => getSongUrl(t.id));\n        const result = await Promise.all(request);\n        data = list.map((t, index) => ({\n          ...t,\n          url: result[index].data.data[0].url, // 由于服务器在国外，一些可以播放的歌曲也取不到url\n        }));\n        localStorage.setItem(id, JSON.stringify(data));\n      }\n      setSongListData(data);\n      dispatch(\n        setList({\n          data,\n        }),\n      );\n      const cacheSongList = localStorage.getItem('cache-song-list') || null;\n      if (cacheSongList) {\n        dispatch(setSongList({ data: JSON.parse(cacheSongList) }));\n      } else {\n        const canPlayList = data.filter(t => t.url);\n        localStorage.setItem('cache-song-list', JSON.stringify(canPlayList));\n        dispatch(setSongList({ data: canPlayList }));\n      }\n      // 歌曲列表加载状态\n      setLoading(false);\n    },\n    [dispatch, id],\n  );\n\n  // 载入当前歌单可播放歌曲\n  const initData = useCallback(() => {\n    const canPlayList = songListData.filter(t => t.url);\n    dispatch(\n      setSongList({\n        data: canPlayList,\n      }),\n    );\n    // 更新可播放歌曲列表\n    localStorage.setItem('cache-song-list', JSON.stringify(canPlayList));\n  }, [songListData, dispatch]);\n  // 获取歌曲列表\n  const getAlbumList = useCallback(\n    async trackIds => {\n      // 切割组合歌曲id\n      const formatIds = arraySplit(trackIds.map((t: { id: string }) => t.id)).map(t => t.join(','));\n      const requests = formatIds.map(ids => getSongList(ids));\n\n      const result = await Promise.all(requests);\n\n      let songs: any[] = [];\n      let privileges: any[] = [];\n\n      result.forEach(t => {\n        songs = songs.concat(t.data.songs);\n        privileges = privileges.concat(t.data.privileges);\n      });\n\n      const list: IList[] = songs.map((t, i) => ({\n        id: t.id,\n        name: t.name,\n        seconds: t.dt / 1000,\n        authors: t.ar.map((j: { name: string }) => j.name).join('，'),\n        coverImgUrl: t.al.picUrl,\n        canPlaying: checkMusic(privileges[i]), // 先通过checkMusic筛一遍\n        url: null,\n      }));\n      // 后台获取歌曲url\n      getSongsUrl(list);\n    },\n    [getSongsUrl],\n  );\n\n  // 获取歌单详情\n  const getAlbumInfo = useCallback(\n    async id => {\n      const { data } = await getAlbumDetail(id);\n      const { playlist } = data;\n      const info: IInfo = {\n        albumId: playlist.id,\n        name: playlist.name,\n        nickname: playlist.creator.nickname,\n        coverImgUrl: playlist.coverImgUrl,\n        description: playlist.description,\n        tags: playlist.tags,\n      };\n      dispatch(\n        setInfo({\n          data: info,\n        }),\n      );\n      getAlbumList(playlist.trackIds);\n    },\n    [getAlbumList, dispatch],\n  );\n\n  // 播放\n  const playSong = useCallback(() => {\n    initData();\n    dispatch(getSongUrlById({ id: songListData.filter(t => t.url)[0].id, index: 0 }));\n  }, [songListData, initData, dispatch]);\n\n  const playSongById = useCallback(\n    id => {\n      // 载入数据\n      initData();\n      // 根据id播放\n      const index = songListData.findIndex(t => t.id === id);\n      dispatch(getSongUrlById({ id, index }));\n    },\n    [songListData, initData, dispatch],\n  );\n\n  useEffect(() => {\n    getAlbumInfo(id);\n  }, [id, getAlbumInfo]);\n\n  return (\n    <div className={styles.album}>\n      <div className={styles.head}>\n        <div className={styles.logo}>\n          <img className={styles.img} src={album.info.coverImgUrl} alt=\"\" />\n        </div>\n        <div className={styles.main}>\n          <div className={styles.name}>\n            <Tag color=\"magenta\">歌单</Tag>\n            {album.info.name}\n          </div>\n          <div className={styles.nickname}>\n            创建者：\n            {album.info.nickname}\n          </div>\n          <div className={styles.buttonGroup}>\n            <Button size=\"small\" icon={<PlayCircleOutlined />} onClick={playSong}>\n              播放\n            </Button>\n            <Button size=\"small\" onClick={initData}>\n              <PlusSquareOutlined />\n            </Button>\n          </div>\n          <div className={styles.tags}>\n            标签：\n            {album.info.tags.map(tag => (\n              <Tag key={tag}>{tag}</Tag>\n            ))}\n          </div>\n          <div className={styles.descript}>\n            介绍：\n            {album.info.description}\n          </div>\n        </div>\n      </div>\n      <div className={styles.listBox}>\n        <div className={styles.title}>歌曲列表</div>\n        <List\n          size=\"small\"\n          loading={loading}\n          dataSource={album.list}\n          renderItem={(item, index) => (\n            <List.Item key={item.id}>\n              <div className={styles.item}>\n                <div className={styles.index}>{index + 1}</div>\n                <div className={styles.main}>\n                  <div className={styles.songName}>{item.name}</div>\n                  <div className={styles.songCreator}>{item.authors}</div>\n                </div>\n                <div className={styles.second}>\n                  <Duration seconds={item.seconds} />\n                </div>\n                <div className={styles.canPlaying}>\n                  {item.url ? (\n                    <Button onClick={() => playSongById(item.id)} type=\"text\" size=\"small\">\n                      播放\n                    </Button>\n                  ) : (\n                    <Button type=\"text\" size=\"small\" disabled>\n                      无版权\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </List.Item>\n          )}\n        />\n      </div>\n      <BackTop visibilityHeight={600} />\n    </div>\n  );\n};\n\nexport default Album;\n"],"sourceRoot":""}