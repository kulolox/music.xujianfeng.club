{"version":3,"sources":["pages/album/index.module.less","utils/tool.ts","pages/album/index.tsx"],"names":["module","exports","arraySplit","arr","step","len","length","rec","i","push","slice","Album","props","dispatch","useDispatch","useState","match","params","id","songListData","setSongListData","loading","setLoading","album","useSelector","state","getAlbumInfo","useCallback","a","getAlbumDetail","data","playlist","info","albumId","name","nickname","creator","coverImgUrl","description","tags","setInfo","getAlbumList","trackIds","formatIds","map","t","join","requests","ids","getSongList","Promise","all","result","songs","forEach","concat","list","seconds","dt","authors","ar","j","al","picUrl","getSongsUrl","cacheAlbumSongList","localStorage","getItem","JSON","parse","request","getSongUrl","index","canPlaying","url","setItem","stringify","setList","cacheSongList","setSongList","canPlayList","filter","initData","setPlaying","playing","playSong","playSongById","playById","useEffect","className","styles","head","logo","img","src","alt","main","color","buttonGroup","size","icon","PlayCircleOutlined","onClick","PlusSquareOutlined","tag","key","descript","listBox","title","dataSource","renderItem","item","Item","songName","songCreator","second","Duration","type","disabled","visibilityHeight"],"mappings":"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","file":"static/js/7.e0502941.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"album\":\"_2hzivxDtZ7Lpvgv_X6pVe_\",\"head\":\"_2G7dEGYEINlmoML5hs1NhP\",\"logo\":\"_1XpWqywhwbUYPRNTj_2SwZ\",\"img\":\"SjhxsrVLLEEskJ03LfpEl\",\"main\":\"_1-lryxsU1rMvVjdxnaLMSB\",\"name\":\"_1TgPIWbSRfEXB5K_PytIj-\",\"nickname\":\"_1jILlatWTSWRHiqXAiGlp6\",\"buttonGroup\":\"_2oNF_eCmWK3wXiMEX8ipq8\",\"tags\":\"_2NXyU-l3NDvjYBWcqg7rAo\",\"listBox\":\"_380ztTIKx73V2U9a6z6OTk\",\"title\":\"_2R7Lx1geUI8ZuUW1MaR26i\",\"item\":\"_1UK-h9FidD_9NTxhMCLDzD\",\"index\":\"_3FrKiNJzzQaolrCA5-D_lD\",\"songName\":\"_2b0O4qR1U949NuqZHG0rDW\",\"songCreator\":\"_2Ekk2V7bfLi-WIEHRrawnv\",\"second\":\"_3HGrHnDeHpZumNXgIB0ahX\",\"canPlaying\":\"_3B08xlREDZ2TTBjaHLS8na\"};","/**\n * 返回当前路径中uri的指定参数\n * @param {string} name\n * @return {string|null}\n */\nexport function getUrlParam(name: string) {\n  const reg = new RegExp(`(^|&)${name}=([^&]*)(&|$)`); // 构造一个含有目标参数的正则表达式对象\n  const r = window.location.search.substr(1).match(reg); // 匹配目标参数\n  if (r != null) return decodeURIComponent(r[2]);\n  return null; // 返回参数值\n}\n\n/**\n * 数组分片，当数组长度超过step时，以step为步长分片数组\n * @param {Array} arr\n * @param {Number} step 分片步长\n */\nexport const arraySplit = (arr: any, step = 20) => {\n  const len = arr.length;\n  const rec = [];\n  if (len <= step) {\n    return [arr];\n  }\n  for (let i = 0; i < len; i += step) {\n    rec.push(arr.slice(i, i + step));\n  }\n  return rec;\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Tag, List, Button, BackTop } from 'antd';\nimport { PlusSquareOutlined, PlayCircleOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { IInfo, IList, setInfo, setList } from '@/store/albumSlice';\nimport { getAlbumDetail, getSongList, getSongUrl } from '@/api';\nimport { arraySplit } from '@/utils/tool';\nimport Duration from '@/components/Duration';\nimport { RootState } from '@/store/rootReducer';\nimport { playById, setPlaying } from '@/store/playerSlice';\nimport styles from './index.module.less';\nimport { setSongList } from '@/store/playerSlice';\n\nconst Album = (props: any) => {\n  const dispatch = useDispatch();\n  const [id] = useState(props.match.params.id);\n  const [songListData, setSongListData] = useState<IList[]>([]);\n  const [loading, setLoading] = useState(true);\n  const album = useSelector((state: RootState) => state.album);\n  // 获取歌单详情\n  const getAlbumInfo = useCallback(async id => {\n    const { data } = await getAlbumDetail(id);\n    const { playlist } = data;\n    const info: IInfo = {\n      albumId: playlist.id,\n      name: playlist.name,\n      nickname: playlist.creator.nickname,\n      coverImgUrl: playlist.coverImgUrl,\n      description: playlist.description,\n      tags: playlist.tags,\n    };\n    dispatch(\n      setInfo({\n        data: info,\n      }),\n    );\n    getAlbumList(playlist.trackIds);\n  }, []);\n\n  // 获取歌曲列表\n  const getAlbumList = useCallback(async trackIds => {\n    // 切割组合歌曲id\n    const formatIds = arraySplit(trackIds.map((t: { id: string }) => t.id)).map(t => t.join(','));\n    const requests = formatIds.map(ids => getSongList(ids));\n\n    const result = await Promise.all(requests);\n\n    let songs: any[] = [];\n\n    result.forEach(t => {\n      songs = songs.concat(t.data.songs);\n    });\n\n    const list: IList[] = songs.map((t, i) => ({\n      id: songs[i].id,\n      name: t.name,\n      seconds: t.dt / 1000,\n      authors: t.ar.map((j: { name: string }) => j.name).join('，'),\n      coverImgUrl: t.al.picUrl,\n    }));\n    // 后台获取歌曲url\n    getSongsUrl(list);\n  }, []);\n\n  // 获取所有歌曲播放链接\n  const getSongsUrl = useCallback(async (list: IList[]) => {\n    // 添加歌曲缓存机制,以专辑id为key\n    let data: IList[] = [];\n    const cacheAlbumSongList = localStorage.getItem(id) || null;\n    if (cacheAlbumSongList) {\n      data = JSON.parse(cacheAlbumSongList);\n    } else {\n      const request = list.map(t => getSongUrl(t.id));\n      const result = await Promise.all(request);\n      data = list.map((t, index) => ({\n        ...t,\n        canPlaying: !!result[index].data.data[0].url,\n        url: result[index].data.data[0].url,\n      }));\n      localStorage.setItem(id, JSON.stringify(data));\n    }\n    setSongListData(data);\n    dispatch(\n      setList({\n        data,\n      }),\n    );\n    const cacheSongList = localStorage.getItem('cache-song-list') || null;\n    if (cacheSongList) {\n      dispatch(setSongList({ data: JSON.parse(cacheSongList) }));\n    } else {\n      const canPlayList = data.filter(t => t.canPlaying);\n      localStorage.setItem('cache-song-list', JSON.stringify(canPlayList));\n      dispatch(setSongList({ data: canPlayList }));\n    }\n    // 歌曲列表加载状态\n    setLoading(false);\n  }, []);\n\n  // 载入当前歌单可播放歌曲\n  const initData = useCallback(() => {\n    const canPlayList = songListData.filter(t => t.canPlaying);\n    // 更新可播放歌曲列表\n    localStorage.setItem('cache-song-list', JSON.stringify(canPlayList));\n    dispatch(\n      setSongList({\n        data: canPlayList,\n      }),\n    );\n    dispatch(setPlaying({ playing: false }));\n  }, [songListData]);\n\n  // 播放\n  const playSong = useCallback(() => {\n    initData();\n    dispatch(setPlaying({ playing: true }));\n  }, [songListData]);\n\n  const playSongById = useCallback(\n    id => {\n      initData();\n      dispatch(playById({ id }));\n    },\n    [songListData],\n  );\n\n  useEffect(() => {\n    getAlbumInfo(id);\n  }, [id]);\n\n  return (\n    <div className={styles.album}>\n      <div className={styles.head}>\n        <div className={styles.logo}>\n          <img className={styles.img} src={album.info.coverImgUrl} alt=\"\" />\n        </div>\n        <div className={styles.main}>\n          <div className={styles.name}>\n            <Tag color=\"magenta\">歌单</Tag>\n            {album.info.name}\n          </div>\n          <div className={styles.nickname}>\n            创建者：\n            {album.info.nickname}\n          </div>\n          <div className={styles.buttonGroup}>\n            <Button size=\"small\" icon={<PlayCircleOutlined />} onClick={playSong}>\n              播放\n            </Button>\n            <Button size=\"small\" onClick={initData}>\n              <PlusSquareOutlined />\n            </Button>\n          </div>\n          <div className={styles.tags}>\n            标签：\n            {album.info.tags.map(tag => (\n              <Tag key={tag}>{tag}</Tag>\n            ))}\n          </div>\n          <div className={styles.descript}>\n            介绍：\n            {album.info.description}\n          </div>\n        </div>\n      </div>\n      <div className={styles.listBox}>\n        <div className={styles.title}>歌曲列表</div>\n        <List\n          size=\"small\"\n          loading={loading}\n          dataSource={album.list}\n          renderItem={(item, index) => (\n            <List.Item key={item.id}>\n              <div className={styles.item}>\n                <div className={styles.index}>{index + 1}</div>\n                <div className={styles.main}>\n                  <div className={styles.songName}>{item.name}</div>\n                  <div className={styles.songCreator}>{item.authors}</div>\n                </div>\n                <div className={styles.second}>\n                  <Duration seconds={item.seconds} />\n                </div>\n                <div className={styles.canPlaying}>\n                  {item.canPlaying ? (\n                    <Button onClick={() => playSongById(item.id)} type=\"text\" size=\"small\">\n                      播放\n                    </Button>\n                  ) : (\n                    <Button type=\"text\" size=\"small\" disabled>\n                      无版权\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </List.Item>\n          )}\n        />\n      </div>\n      <BackTop visibilityHeight={600} />\n    </div>\n  );\n};\n\nexport default Album;\n"],"sourceRoot":""}