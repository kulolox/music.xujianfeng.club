{"version":3,"sources":["pages/album/index.module.less","utils/tool.ts","pages/album/index.tsx"],"names":["module","exports","arraySplit","arr","step","len","length","rec","i","push","slice","Album","dispatch","useDispatch","router","useRouter","useState","loading","setLoading","setcacheList","useLocalStorage","query","id","info","albumId","name","nickname","coverImgUrl","tags","description","list","album","setAlbum","getAlbumInfo","useCallback","a","getAlbumDetail","playlist","data","albumData","creator","formatIds","trackIds","map","t","join","requests","ids","getSongList","Promise","all","result","songs","privileges","forEach","concat","seconds","dt","authors","ar","j","al","picUrl","canPlaying","privilege","st","fee","url","urlRequests","getSongUrl","urlResults","index","useEffect","initData","canPlayList","filter","setSongList","getSongUrlById","autoPlay","playSong","playSongById","findIndex","className","styles","head","logo","img","src","alt","main","color","buttonGroup","size","icon","PlayCircleOutlined","onClick","PlusSquareOutlined","tag","key","descript","listBox","title","dataSource","renderItem","item","Item","songName","songCreator","second","Duration","type","disabled","visibilityHeight"],"mappings":"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","file":"static/js/7.a43ff399.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"album\":\"_2hzivxDtZ7Lpvgv_X6pVe_\",\"head\":\"_2G7dEGYEINlmoML5hs1NhP\",\"logo\":\"_1XpWqywhwbUYPRNTj_2SwZ\",\"img\":\"SjhxsrVLLEEskJ03LfpEl\",\"main\":\"_1-lryxsU1rMvVjdxnaLMSB\",\"name\":\"_1TgPIWbSRfEXB5K_PytIj-\",\"nickname\":\"_1jILlatWTSWRHiqXAiGlp6\",\"buttonGroup\":\"_2oNF_eCmWK3wXiMEX8ipq8\",\"tags\":\"_2NXyU-l3NDvjYBWcqg7rAo\",\"listBox\":\"_380ztTIKx73V2U9a6z6OTk\",\"title\":\"_2R7Lx1geUI8ZuUW1MaR26i\",\"item\":\"_1UK-h9FidD_9NTxhMCLDzD\",\"index\":\"_3FrKiNJzzQaolrCA5-D_lD\",\"songName\":\"_2b0O4qR1U949NuqZHG0rDW\",\"songCreator\":\"_2Ekk2V7bfLi-WIEHRrawnv\",\"second\":\"_3HGrHnDeHpZumNXgIB0ahX\",\"canPlaying\":\"_3B08xlREDZ2TTBjaHLS8na\"};","/**\n * 返回当前路径中uri的指定参数\n * @param {string} name\n * @return {string|null}\n */\nexport function getUrlParam(name: string) {\n  const reg = new RegExp(`(^|&)${name}=([^&]*)(&|$)`); // 构造一个含有目标参数的正则表达式对象\n  const r = window.location.search.substr(1).match(reg); // 匹配目标参数\n  if (r != null) return decodeURIComponent(r[2]);\n  return null; // 返回参数值\n}\n\n/**\n * 判断音乐是否可以播放\n * @param {Object} privileges 原始字符串\n * @returns {Boolean}\n */\nexport const checkMusic = (privilege: any) => {\n  return (\n    privilege.st !== -1 &&\n    privilege.st !== -200 &&\n    privilege.fee !== 1 &&\n    privilege.fee !== 4 &&\n    privilege.fee !== 16\n  );\n};\n\n/**\n * 数组分片，当数组长度超过step时，以step为步长分片数组\n * @param {Array} arr\n * @param {Number} step 分片步长\n */\nexport const arraySplit = (arr: any, step = 20) => {\n  const len = arr.length;\n  const rec = [];\n  if (len <= step) {\n    return [arr];\n  }\n  for (let i = 0; i < len; i += step) {\n    rec.push(arr.slice(i, i + step));\n  }\n  return rec;\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Tag, List, Button, BackTop } from 'antd';\nimport { PlusSquareOutlined, PlayCircleOutlined } from '@ant-design/icons';\nimport { useDispatch } from 'react-redux';\nimport { getAlbumDetail, getSongList, getSongUrl } from '@/api';\nimport { useLocalStorage, useRouter } from '@/hooks'\nimport { arraySplit, checkMusic } from '@/utils/tool';\nimport Duration from '@/components/Duration';\nimport { getSongUrlById, setSongList } from '@/store/playerSlice';\nimport { IList, IAlbum } from '@/interfaces'\nimport styles from './index.module.less';\n\nconst Album = () => {\n  const dispatch = useDispatch();\n  // 获取路由相关数据与方法\n  const router: any = useRouter()\n  const [loading, setLoading] = useState(true);\n\n  // 播放列表缓存\n  const setcacheList = useLocalStorage<IList[]>('cache-song-list', null)[1]\n  // 专辑信息列表\n  const [album, setAlbum] = useLocalStorage<IAlbum>(router.query.id, {\n    info: {\n      albumId: '',\n      name: '',\n      nickname: '',\n      coverImgUrl: '',\n      tags: [],\n      description: '',\n    },\n    list: [],\n  })\n\n  // 获取歌单详情\n  const getAlbumInfo = useCallback(\n    async id => {\n      // 如果缓存有数据，则不走请求逻辑\n      if (!album.info.albumId) {\n        const { data: { playlist } } = await getAlbumDetail(id);\n\n        const albumData: IAlbum = {\n          info: {\n            albumId: id,\n            name: playlist.name,\n            nickname: playlist.creator.nickname,\n            coverImgUrl: playlist.coverImgUrl,\n            description: playlist.description,\n            tags: playlist.tags,\n          },\n          list: [],\n        }\n  \n        // 切割组合歌曲id\n        const formatIds = arraySplit(playlist.trackIds.map((t: { id: string }) => t.id)).map(t => t.join(','));\n        \n        const requests = formatIds.map(ids => getSongList(ids));\n        const result = await Promise.all(requests);\n  \n        let songs: any[] = [];\n        let privileges: any[] = [];\n        result.forEach(t => {\n          songs = songs.concat(t.data.songs);\n          privileges = privileges.concat(t.data.privileges);\n        });\n  \n        albumData.list = songs.map((t, i) => ({\n          id: t.id,\n          name: t.name,\n          seconds: t.dt / 1000,\n          authors: t.ar.map((j: { name: string }) => j.name).join('，'),\n          coverImgUrl: t.al.picUrl,\n          canPlaying: checkMusic(privileges[i]), // 先通过checkMusic筛一遍\n          url: null,\n        }));\n\n        // 获取歌曲url\n        const urlRequests = albumData.list.map(t => getSongUrl(t.id));\n        const urlResults = await Promise.all(urlRequests);\n        albumData.list.map((t, index) => t.url = urlResults[index].data.data[0].url)\n        setAlbum(albumData)\n      }\n      setLoading(false)\n    },\n    [album, setAlbum],\n  );\n  useEffect(() => {\n    getAlbumInfo(router.query.id);\n  }, [getAlbumInfo, router.query.id]);\n\n  // 载入当前歌单可播放歌曲\n  const initData = useCallback(() => {\n    const canPlayList = album.list.filter(t => t.url);\n    // 更新可播放歌曲列表缓存\n    setcacheList(canPlayList)\n    dispatch(setSongList({ data: canPlayList }));\n    dispatch(getSongUrlById({ id: canPlayList.filter(t => t.url)[0].id, index: 0, autoPlay: false }));\n  }, [album.list, dispatch, setcacheList]);\n\n  // 播放\n  const playSong = useCallback(() => {\n    initData();\n    dispatch(getSongUrlById({ id: album.list.filter(t => t.url)[0].id, index: 0, autoPlay: true }));\n  }, [album.list, initData, dispatch]);\n\n  const playSongById = useCallback(\n    id => {\n      // 载入数据\n      initData();\n      // 根据id播放\n      const index = album.list.findIndex(t => t.id === id);\n      dispatch(getSongUrlById({ id, index, autoPlay: true }));\n    },\n    [album.list, initData, dispatch],\n  );\n  \n  return (\n    <div className={styles.album}>\n      <div className={styles.head}>\n        <div className={styles.logo}>\n          <img className={styles.img} src={album.info.coverImgUrl} alt=\"\" />\n        </div>\n        <div className={styles.main}>\n          <div className={styles.name}>\n            <Tag color=\"magenta\">歌单</Tag>\n            {album.info.name}\n          </div>\n          <div className={styles.nickname}>\n            创建者：\n            {album.info.nickname}\n          </div>\n          <div className={styles.buttonGroup}>\n            <Button size=\"small\" icon={<PlayCircleOutlined />} onClick={playSong}>\n              播放\n            </Button>\n            <Button size=\"small\" onClick={initData}>\n              <PlusSquareOutlined />\n            </Button>\n          </div>\n          <div className={styles.tags}>\n            标签：\n            {album.info.tags.map(tag => (\n              <Tag key={tag}>{tag}</Tag>\n            ))}\n          </div>\n          <div className={styles.descript}>\n            介绍：\n            {album.info.description}\n          </div>\n        </div>\n      </div>\n      <div className={styles.listBox}>\n        <div className={styles.title}>歌曲列表</div>\n        <List\n          size=\"small\"\n          loading={loading}\n          dataSource={album.list}\n          renderItem={(item, index) => (\n            <List.Item key={item.id}>\n              <div className={styles.item}>\n                <div className={styles.index}>{index + 1}</div>\n                <div className={styles.main}>\n                  <div className={styles.songName}>{item.name}</div>\n                  <div className={styles.songCreator}>{item.authors}</div>\n                </div>\n                <div className={styles.second}>\n                  <Duration seconds={item.seconds} />\n                </div>\n                <div className={styles.canPlaying}>\n                  {item.url ? (\n                    <Button onClick={() => playSongById(item.id)} type=\"text\" size=\"small\">\n                      播放\n                    </Button>\n                  ) : (\n                    <Button type=\"text\" size=\"small\" disabled>\n                      无版权\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </List.Item>\n          )}\n        />\n      </div>\n      <BackTop visibilityHeight={600} />\n    </div>\n  );\n};\n\nexport default Album;\n"],"sourceRoot":""}