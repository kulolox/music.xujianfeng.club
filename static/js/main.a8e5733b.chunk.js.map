{"version":3,"sources":["store/playerSlice.ts","components/Volume/index.tsx","components/ScrollContainer/index.tsx","components/Lyric/index.tsx","components/ListButton/index.tsx","components/Player/PrevButton.tsx","components/Player/NextButton.tsx","components/Player/TogglePlayButton.tsx","components/Player/index.tsx","components/PlayerBox/index.tsx","App.tsx","serviceWorker.ts","store/rootReducer.ts","store/index.ts","index.tsx","components/ListButton/index.module.less","components/Player/index.module.less","components/IconFont/index.tsx","hooks/index.ts","components/Duration/index.tsx","components/PlayerBox/index.module.less","api/config.ts","api/request.ts","api/index.ts","components/ScrollContainer/index.module.less","components/Lyric/index.module.less","components/Volume/index.module.less"],"names":["getSongUrlById","createAsyncThunk","data","a","dispatch","getSongUrl","id","res","setCurrentUrl","url","setCurrentIndex","index","autoPlay","playerSlice","createSlice","name","initialState","currentIndex","currentUrl","playing","loop","playedSeconds","list","extraReducers","builder","addCase","fulfilled","state","action","payload","reducers","setSongList","setPlayedSconds","setPlaying","togglePlaying","actions","Volume","props","useState","volume","value","setVal","showVolume","setShowVolume","ref","useRef","useOnClickOutside","onVolumeChange","useCallback","val","onChange","toggleVolume","onVolumeAfterChange","className","styles","onClick","type","icon","IconFont","content","min","max","onAfterChange","ScrollContainer","children","getContainerDom","React","slideBlockStyle","setSlideBlockStyle","hasScrollBar","setHasScrollBar","container","parseDom","dom","current","clientHeight","scrollHeight","scrollTop","slideBlockHeight","slideBlockTop","height","top","handelScroll","e","target","useEffect","containerDom","addEventListener","removeEventListener","classNames","scrollContent","scrollBar","style","timeExp","scroll","distance","start","maxScrollTop","window","requestAnimationFrame","work","timestamp","t","progress","easeCubicInOut","newScrollTop","Lyric","useSelector","player","formatLyrics","useMemo","lyricStr","lines","split","lyricArr","i","length","line","result","exec","txt","replace","trim","push","time","sort","b","parseLyric","lyric","timeRange","map","lyr","lyricDom","document","getElementsByClassName","activeIndex","setActiveIndex","setContainer","range","len","indexOf","getTimeIndex","offsetTop","lyrContainer","active","key","ListButton","useDispatch","showContainer","setShowContainer","setLyric","toggleContainer","play","findIndex","getSongLyric","lrc","fetch","count","overflowCount","size","offset","backImg","backgroundImage","coverImgUrl","listBox","head","item","songName","songCreator","authors","second","Duration","seconds","canPlaying","shape","lyricBox","noLyric","PrevButton","hasPrevSong","prevSong","disabled","NextButton","hasNextSong","nextSong","TogglePlayButton","hastSong","togglePlay","fontSize","Player","RPlayer","progressValue","setProgressValue","duration","setDuration","seeking","setSeeking","setVolume","onEndedSong","onTimeUpdate","currentTime","onDuration","progressChange","progressAfterChange","pause","useEventListener","src","preload","audio","controller","button","main","coverImage","spin","defaultValue","tooltipVisible","Math","floor","menu","PlayerBox","isLock","setLock","toggltLock","playerBox","locked","lockBox","Home","lazy","Album","App","useLocalStorage","Suspense","fallback","path","exact","component","Boolean","location","hostname","match","rootReducer","combineReducers","playerReducer","getDefaultMiddleware","serializableCheck","logger","store","configureStore","reducer","devTools","process","middleware","require","default","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports","createFromIconfontCN","scriptUrl","initialValue","localStorage","getItem","JSON","parse","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","useRouter","params","useParams","useLocation","history","useHistory","useRouteMatch","pathname","query","queryString","search","eventName","handler","element","savedHandler","targetElement","eventListener","event","listener","contains","moment","Date","utcOffset","format","axiosConfig","baseURL","transformResponse","timeout","responseType","maxContentLength","validateStatus","status","pending","cancelToken","axios","CancelToken","removePending","config","p","method","cancel","splice","request","create","interceptors","use","c","Promise","reject","response","baseUrl","getBanner","get","getCatlist","getAlbumList","limit","cat","order","getAlbumDetail","getSongList","ids"],"mappings":"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","file":"static/js/main.a8e5733b.chunk.js","sourcesContent":["import { getSongUrl } from '@/api';\nimport { IList } from '@/interfaces';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\ninterface IPlayerDefaultState {\n  currentIndex: number; // 当前播放歌曲\n  currentUrl: string;\n  playing: boolean;\n  loop: boolean;\n  playedSeconds: number;\n  list: IList[];\n}\n\nconst defaultState: IPlayerDefaultState = {\n  currentIndex: -1,\n  currentUrl: '',\n  playing: false,\n  loop: false,\n  playedSeconds: 0,\n  list: [],\n};\n\n// 每次播放都重新获取歌曲url\nexport const getSongUrlById = createAsyncThunk(\n  'player/getSongUrl',\n  async (data: any, { dispatch }) => {\n    const res = await getSongUrl(data.id);\n    // 更新状态\n    dispatch(setCurrentUrl({ url: res.data.data[0].url }));\n    dispatch(setCurrentIndex({ index: data.index }));\n    return {\n      autoPlay: data.autoPlay,\n    };\n  },\n);\n\nconst playerSlice = createSlice({\n  name: 'player',\n  initialState: defaultState,\n  extraReducers: builder => {\n    builder.addCase(getSongUrlById.fulfilled, (state, action) => {\n      state.playing = action.payload.autoPlay;\n    });\n  },\n  reducers: {\n    setSongList: (state, action) => {\n      state.list = action.payload.data;\n      state.currentIndex = 0;\n    },\n    setPlayedSconds: (state, action) => {\n      state.playedSeconds = action.payload.playedSeconds;\n    },\n    setPlaying: (state, action) => {\n      state.playing = action.payload.playing;\n    },\n    setCurrentUrl: (state, action) => {\n      state.currentUrl = action.payload.url;\n    },\n    setCurrentIndex: (state, action) => {\n      state.currentIndex = action.payload.index;\n    },\n    togglePlaying: (state, action) => {\n      const { playing } = action.payload;\n      state.playing = playing;\n    },\n  },\n});\n\nexport const {\n  setSongList,\n  setCurrentIndex,\n  setCurrentUrl,\n  togglePlaying,\n  setPlaying,\n  setPlayedSconds,\n} = playerSlice.actions;\n\nexport default playerSlice.reducer;\n","import React, { useCallback, useRef, useState } from 'react';\nimport { Slider, Button } from 'antd';\nimport IconFont from '@components/IconFont';\nimport styles from './index.module.less';\nimport { useOnClickOutside } from '@/hooks';\n\ninterface IProps {\n  volume: number;\n  onChange: Function;\n}\n\nconst Volume = (props: IProps) => {\n  const [value, setVal] = useState(props.volume);\n  const [showVolume, setShowVolume] = useState(false);\n  const ref = useRef(null)\n  useOnClickOutside(ref, () => setShowVolume(false))\n  const onVolumeChange = useCallback(\n    val => {\n      setVal(val);\n      props.onChange(val);\n    },\n    [props],\n  );\n\n  const toggleVolume = useCallback(val => {\n    setShowVolume(val);\n  }, []);\n\n  const onVolumeAfterChange = useCallback(\n    val => {\n      toggleVolume(false);\n    },\n    [toggleVolume],\n  );\n\n  return (\n    <div className={styles.volume} ref={ref}>\n      <Button\n        onClick={() => toggleVolume(!showVolume)}\n        type=\"text\"\n        icon={<IconFont type=\"icon-volume\" />}\n      />\n      {showVolume && (\n        <div className={styles.content}>\n          <Slider\n            value={value}\n            min={0}\n            max={100}\n            onChange={onVolumeChange}\n            onAfterChange={onVolumeAfterChange}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Volume;\n","import React, { ReactNode, useEffect, useRef, useCallback } from 'react';\nimport classNames from 'classnames';\nimport styles from './index.module.less';\n\ninterface IProps {\n  children: ReactNode;\n  className?: string;\n  getContainerDom?: Function;\n}\n\nconst ScrollContainer = (props: IProps) => {\n  const { className, children, getContainerDom } = props;\n  const [slideBlockStyle, setSlideBlockStyle] = React.useState<object>({});\n  const [hasScrollBar, setHasScrollBar] = React.useState(true);\n  const container = useRef<HTMLDivElement>(null);\n\n  // 解析滚动条\n  const parseDom = useCallback((dom = container.current) => {\n    if (!dom) return;\n    const { clientHeight, scrollHeight, scrollTop } = dom;\n    // 滑块高度\n    const slideBlockHeight = clientHeight ** 2 / scrollHeight;\n    // 滑块距离顶部距离\n    const slideBlockTop =\n      (scrollTop * (clientHeight - slideBlockHeight)) / (scrollHeight - clientHeight);\n\n    if (slideBlockTop !== slideBlockTop) {\n      setHasScrollBar(false);\n    } else {\n      setHasScrollBar(true);\n      setSlideBlockStyle({\n        height: slideBlockHeight, // 滑块高度\n        top: slideBlockTop, // 滑块距离顶部距离\n      });\n    }\n  }, []);\n\n  const handelScroll = React.useCallback(\n    e => {\n      parseDom(e.target);\n    },\n    [parseDom],\n  );\n\n  useEffect(() => {\n    const containerDom = container.current!;\n    // 滚动容器dom传递到父组件\n    if (getContainerDom) {\n      getContainerDom(containerDom);\n    }\n    containerDom.addEventListener('scroll', handelScroll);\n    return () => containerDom.removeEventListener('scroll', handelScroll);\n  }, [getContainerDom, handelScroll]);\n\n  return (\n    <div className={classNames(styles.container, className)}>\n      <div ref={container} className={styles.scrollContent}>\n        {children}\n      </div>\n      {hasScrollBar && (\n        <div className={styles.scrollBar}>\n          <span style={{ ...slideBlockStyle }} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ScrollContainer;\n","import React, { useState, useEffect, useMemo, useRef } from 'react';\nimport classNames from 'classnames';\nimport { easeCubicInOut } from 'd3-ease';\nimport ScrollContainer from '@components/ScrollContainer';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '@/store/rootReducer';\nimport styles from './index.module.less';\n\ninterface ILyric {\n  time: number;\n  txt: string;\n}\n\nconst timeExp = /\\[(\\d{2}):(\\d{2}\\.\\d{1,3})\\]/g;\n\nconst BASELINE = 180;\n\n// 解析歌词\nconst parseLyric = (lyricStr: string) => {\n  if (!lyricStr) return [];\n  const lines = lyricStr.split('\\n');\n  let lyricArr: ILyric[] = [];\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    let result: any = timeExp.exec(line);\n    if (result) {\n      // 去掉时间，留下歌词部分\n      const txt = line.replace(timeExp, '').trim();\n      if (txt) {\n        lyricArr.push({\n          time: result[1] * 60 + result[2] * 1,\n          txt,\n        });\n      }\n    }\n  }\n  lyricArr.sort((a, b) => a.time - b.time);\n  return lyricArr;\n};\n\n/**\n *\n * @param time 当前播放进度\n * @param range 歌词提取出的时间数组\n */\nconst getTimeIndex = (time: number, range: number[]) => {\n  const len = range.length;\n  if (time <= range[0]) return 0;\n  if (time >= range[len - 1]) return len - 1;\n  let index = 0;\n  for (const t of range) {\n    if (t > time) {\n      index = range.indexOf(t) - 1;\n      break;\n    }\n  }\n  return index;\n};\n\nconst scroll = (dom: HTMLDivElement, distance: number) => {\n  const duration = 600; // 动画持续时间(ms)\n  let state = 0;\n  let start: number | null = null;\n  const { scrollTop } = dom;\n  const maxScrollTop = distance - scrollTop;\n  const work = (timestamp: number) => {\n    if (!start) {\n      start = timestamp;\n    }\n    state = timestamp - start;\n    const t = state / duration;\n    let progress = easeCubicInOut(t);\n    if (progress > 1) {\n      progress = 1;\n    }\n    const newScrollTop = maxScrollTop * progress;\n    dom.scrollTop = newScrollTop + scrollTop;\n    if (progress < 1) {\n      window.requestAnimationFrame(work);\n    }\n  };\n  window.requestAnimationFrame(work);\n};\n\n// containerDom：滚动容器， 当前dom：dom\nconst srcollToActiveLine = (containerDom: any, dom: any) => {\n  if (!containerDom) return;\n  // 如果当前标亮的段落超过基准线，则滚动超过的部分\n  if (dom.offsetTop > BASELINE) {\n    scroll(containerDom, dom.offsetTop - BASELINE);\n  } else {\n    scroll(containerDom, 0);\n  }\n};\n\ninterface Iprops {\n  lyric: string;\n}\n\nconst Lyric = (props: Iprops) => {\n  const { playedSeconds } = useSelector((state: RootState) => state.player);\n  // 歌词解析时间轴数据\n  const formatLyrics = useMemo(() => parseLyric(props.lyric), [props.lyric]);\n  // 时间轴\n  const timeRange = useMemo(() => formatLyrics.map(lyr => lyr.time), [formatLyrics]);\n  // 歌词渲染dom\n  const lyricDom = useRef<any>(document.getElementsByClassName('lyric'));\n  // 当前播放歌词\n  const [activeIndex, setActiveIndex] = useState(0);\n  // 滚动容器\n  const [container, setContainer] = useState<HTMLDivElement | null>(null);\n\n  // 根据播放进度，确定当前歌词\n  useEffect(() => {\n    setActiveIndex(getTimeIndex(playedSeconds, timeRange));\n  }, [playedSeconds, timeRange]);\n\n  // 根据当前选中歌词dom,确定滚动\n  useEffect(() => {\n    if (lyricDom.current.length > 0) {\n      srcollToActiveLine(container, lyricDom.current[activeIndex]);\n    }\n  }, [activeIndex, container]);\n\n  return (\n    <ScrollContainer getContainerDom={(ref: HTMLDivElement) => setContainer(ref)}>\n      <div className={styles.lyrContainer}>\n        {formatLyrics.map((line, index) => (\n          <div\n            className={classNames(styles.line, {\n              [styles.active]: activeIndex === index,\n            })}\n            key={line.time + line.txt}\n          >\n            {line.txt}\n          </div>\n        ))}\n      </div>\n    </ScrollContainer>\n  );\n};\n\nexport default Lyric;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { Button, Badge } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport IconFont from '@components/IconFont';\nimport ScrollContainer from '@components/ScrollContainer';\nimport Duration from '@components/Duration';\nimport { RootState } from '@/store/rootReducer';\nimport { getSongUrlById } from '@/store/playerSlice';\nimport { getSongLyric } from '@/api';\nimport Lyric from '@components/Lyric';\nimport styles from './index.module.less';\n\nconst ListButton = () => {\n  const { list, playing, currentIndex } = useSelector((state: RootState) => state.player);\n  const dispatch = useDispatch();\n  const [showContainer, setShowContainer] = useState(false);\n  const [lyric, setLyric] = useState('');\n\n  const toggleContainer = useCallback(val => {\n    setShowContainer(val);\n  }, []);\n\n  const play = useCallback(\n    id => {\n      const index = list.findIndex(t => t.id === id);\n      dispatch(getSongUrlById({ id, index }));\n    },\n    [list, dispatch],\n  );\n\n  useEffect(() => {\n    // 初始化歌词\n    setLyric('');\n    // 获取歌词\n    const fetch = async () => {\n      const id = list[currentIndex]?.id;\n      if (id) {\n        const result = await getSongLyric(id);\n        if (result.data.lrc) {\n          setLyric(result.data.lrc.lyric);\n        }\n      }\n    };\n    fetch();\n  }, [currentIndex, list]);\n  return (\n    <div className={styles.list}>\n      <Badge count={list.length} overflowCount={99} size=\"small\" offset={[5, 0]}>\n        <Button\n          onClick={() => toggleContainer(!showContainer)}\n          type=\"text\"\n          icon={<IconFont type=\"icon-music-list\" />}\n        />\n      </Badge>\n      {showContainer && (\n        <div className={styles.container}>\n          <div\n            className={styles.backImg}\n            style={{ backgroundImage: `url('${list[currentIndex]?.coverImgUrl}')` }}\n          />\n          <div className={styles.content}>\n            <div className={styles.listBox}>\n              <div className={styles.head}>播放列表</div>\n              <ScrollContainer>\n                {list.map((item, index) => (\n                  <div key={item.id} className={styles.item}>\n                    <div className={styles.index}>{index + 1}</div>\n                    <div className={styles.songName}>{item.name}</div>\n                    <div className={styles.songCreator}>{item.authors}</div>\n                    <div className={styles.second}>\n                      <Duration seconds={item.seconds} />\n                    </div>\n                    <div className={styles.canPlaying}>\n                      <Button\n                        shape=\"circle\"\n                        type=\"ghost\"\n                        size=\"small\"\n                        onClick={() => play(item.id)}\n                        icon={\n                          index === currentIndex && playing ? (\n                            <IconFont type=\"icon-pause\" />\n                          ) : (\n                            <IconFont type=\"icon-play\" />\n                          )\n                        }\n                      />\n                    </div>\n                  </div>\n                ))}\n              </ScrollContainer>\n            </div>\n            <div className={styles.lyricBox}>\n              <div className={styles.head}>歌词</div>\n              {lyric ? <Lyric lyric={lyric} /> : <div className={styles.noLyric}>暂无歌词</div>}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ListButton;\n","import React, { useCallback, useMemo } from 'react';\nimport { Button } from 'antd';\nimport IconFont from '@components/IconFont';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '@/store/rootReducer';\nimport { getSongUrlById } from '@/store/playerSlice';\n\ninterface IProps {\n  className: string;\n}\n\nconst PrevButton = (props: IProps) => {\n  const { currentIndex, list } = useSelector((state: RootState) => state.player);\n  const dispatch = useDispatch();\n  // 类似computed效果\n  const hasPrevSong = useMemo(() => currentIndex > 0, [currentIndex]);\n\n  const prevSong = useCallback(() => {\n    const index = currentIndex - 1;\n    dispatch(getSongUrlById({ id: list[index].id, index, autoPlay: true }));\n  }, [list, currentIndex, dispatch]);\n\n  return (\n    <div className={props.className}>\n      <Button\n        onClick={prevSong}\n        disabled={!hasPrevSong}\n        shape=\"circle\"\n        type=\"ghost\"\n        icon={<IconFont type=\"icon-prev\" />}\n      />\n    </div>\n  );\n};\n\nexport default PrevButton;\n","import React, { useCallback, useMemo } from 'react';\nimport { Button } from 'antd';\nimport IconFont from '@components/IconFont';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '@/store/rootReducer';\nimport { getSongUrlById } from '@/store/playerSlice';\n\ninterface IProps {\n  className: string;\n}\n\nconst NextButton = (props: IProps) => {\n  const { currentIndex, list } = useSelector((state: RootState) => state.player);\n  const dispatch = useDispatch();\n\n  // 类似computed效果\n  const hasNextSong = useMemo(() => currentIndex < list.length - 1, [currentIndex, list]);\n\n  const nextSong = useCallback(() => {\n    const index = currentIndex + 1;\n    dispatch(getSongUrlById({ id: list[index].id, index, autoPlay: true }));\n  }, [list, currentIndex, dispatch]);\n\n  return (\n    <div className={props.className}>\n      <Button\n        onClick={nextSong}\n        disabled={!hasNextSong}\n        shape=\"circle\"\n        type=\"ghost\"\n        icon={<IconFont type=\"icon-next\" />}\n      />\n    </div>\n  );\n};\n\nexport default NextButton;\n","import React, { useCallback, useMemo } from 'react';\nimport { Button } from 'antd';\nimport IconFont from '@components/IconFont';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '@/store/rootReducer';\nimport { togglePlaying } from '@/store/playerSlice';\n\ninterface IProps {\n  className: string;\n}\n\nconst TogglePlayButton = (props: IProps) => {\n  const { list, playing } = useSelector((state: RootState) => state.player);\n  const dispatch = useDispatch();\n  // 类似computed效果\n  const hastSong = useMemo(() => list.length > 0, [list]);\n\n  const togglePlay = useCallback(\n    val => {\n      dispatch(togglePlaying({ playing: val }));\n    },\n    [dispatch],\n  );\n\n  return (\n    <div className={props.className}>\n      <Button\n        disabled={!hastSong}\n        onClick={() => togglePlay(!playing)}\n        shape=\"circle\"\n        type=\"ghost\"\n        size=\"large\"\n        icon={\n          playing ? (\n            <IconFont style={{ fontSize: 25 }} type=\"icon-pause\" />\n          ) : (\n            <IconFont type=\"icon-play\" />\n          )\n        }\n      />\n    </div>\n  );\n};\n\nexport default TogglePlayButton;\n","import React, { useCallback, useRef, useState, useEffect } from 'react';\r\nimport { Avatar, Slider } from 'antd';\r\nimport classNames from 'classnames';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '@/store/rootReducer';\r\nimport { setPlayedSconds, getSongUrlById, setPlaying } from '@/store/playerSlice';\r\nimport Duration from '@components/Duration';\r\nimport Volume from '@components/Volume';\r\nimport ListButton from '@components/ListButton';\r\nimport PrevButton from './PrevButton';\r\nimport NextButton from './NextButton';\r\nimport TogglePlayButton from './TogglePlayButton';\r\nimport styles from './index.module.less';\r\nimport { useEventListener } from '@/hooks';\r\n\r\nconst DEFAULT_COVER_IMAGE = 'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png';\r\n\r\nconst Player = () => {\r\n  const { currentIndex, currentUrl, list, playing } = useSelector(\r\n    (state: RootState) => state.player,\r\n  );\r\n  const dispatch = useDispatch();\r\n  const RPlayer = useRef<HTMLAudioElement>(null);\r\n  const [progressValue, setProgressValue] = useState(0);\r\n  // 总时长\r\n  const [duration, setDuration] = useState(0);\r\n  // 拖动进度条时不更新数据\r\n  const [seeking, setSeeking] = useState(false);\r\n  const [volume, setVolume] = useState(60);\r\n\r\n  const onEndedSong = useCallback(() => {\r\n    if (currentIndex < list.length - 1) {\r\n      const index = currentIndex + 1;\r\n      dispatch(getSongUrlById({ id: list[index].id, index, autoPlay: true }));\r\n    } else {\r\n      dispatch(setPlaying({ playing: false }));\r\n    }\r\n  }, [list, currentIndex, dispatch]);\r\n\r\n  // audio ontimeupdate事件每隔250ms触发一次\r\n  const onTimeUpdate = useCallback(() => {\r\n    dispatch(setPlayedSconds({ playedSeconds: RPlayer.current!.currentTime }));\r\n    if (!seeking) {\r\n      setProgressValue(RPlayer.current!.currentTime);\r\n    }\r\n  }, [seeking, dispatch]);\r\n\r\n  const onDuration = useCallback(() => {\r\n    setDuration(RPlayer.current!.duration);\r\n  }, []);\r\n\r\n  // 本地状态\r\n  const onVolumeChange = useCallback(val => {\r\n    setVolume(val);\r\n  }, []);\r\n\r\n  const progressChange = useCallback(val => {\r\n    setSeeking(true);\r\n    setProgressValue(val);\r\n  }, []);\r\n\r\n  const progressAfterChange = useCallback(val => {\r\n    setSeeking(false);\r\n    RPlayer.current!.currentTime = val;\r\n  }, []);\r\n\r\n  // 音量控制\r\n  useEffect(() => {\r\n    RPlayer.current!.volume = volume / 100;\r\n  }, [volume]);\r\n\r\n  // 根据播放状态及当前歌曲切换播放暂停\r\n  useEffect(() => {\r\n    if (playing) {\r\n      RPlayer.current!.play();\r\n    } else {\r\n      RPlayer.current!.pause();\r\n    }\r\n  }, [currentIndex, playing]);\r\n\r\n  useEventListener('timeupdate', onTimeUpdate, RPlayer)\r\n  useEventListener('ended', onEndedSong, RPlayer)\r\n  useEventListener('durationchange', onDuration, RPlayer)\r\n  \r\n  return (\r\n    <div className={styles.player}>\r\n      <audio ref={RPlayer} src={currentUrl} preload=\"auto\"></audio>\r\n      <div className={styles.audio}>\r\n        <div className={styles.controller}>\r\n          <PrevButton className={styles.button} />\r\n          <TogglePlayButton className={styles.button} />\r\n          <NextButton className={styles.button} />\r\n        </div>\r\n        <div className={styles.main}>\r\n          <Avatar\r\n            className={classNames(styles.coverImage, { [styles.spin]: playing })}\r\n            src={list[currentIndex]?.coverImgUrl ?? DEFAULT_COVER_IMAGE}\r\n          />\r\n          <div className={styles.content}>\r\n            <div className={styles.head}>\r\n              <div>{list[currentIndex]?.name ?? '暂无'}</div>\r\n              <div>\r\n                <Duration seconds={progressValue} />\r\n                /\r\n                <Duration seconds={duration} />\r\n              </div>\r\n            </div>\r\n            <div className={styles.progress}>\r\n              <Slider\r\n                onAfterChange={progressAfterChange}\r\n                onChange={progressChange}\r\n                defaultValue={0}\r\n                tooltipVisible={false}\r\n                value={progressValue}\r\n                max={Math.floor(list[currentIndex]?.seconds)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className={styles.menu}>\r\n          <div className={styles.button}>\r\n            <Volume volume={volume} onChange={onVolumeChange} />\r\n          </div>\r\n          {/* <div className={styles.button}>\r\n            <Button type=\"text\" icon={<SyncOutlined color=\"#fff\" />} />\r\n          </div> */}\r\n          <div className={styles.button}>\r\n            <ListButton />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","import React, { useCallback, useState } from 'react';\nimport classNames from 'classnames';\nimport styles from './index.module.less';\nimport IconFont from '../IconFont';\nimport Player from '../Player';\n\nconst PlayerBox = () => {\n  // TODO 播放器容器暂时展开\n  const [isLock, setLock] = useState(true);\n  const toggltLock = useCallback(val => {\n    setLock(val);\n  }, []);\n  return (\n    <div className={classNames(styles.playerBox, { [styles.locked]: isLock })}>\n      <div className={styles.lockBox} onClick={() => toggltLock(!isLock)}>\n        <IconFont type={isLock ? 'icon-lock_fill' : 'icon-unlock_fill'} />\n      </div>\n      <div className={styles.player}>\n        <Player />\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerBox;\n","import React, { Fragment, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport PlayerBox from '@components/PlayerBox';\nimport { useDispatch } from 'react-redux';\nimport { useLocalStorage } from '@/hooks'\nimport {\n  getSongUrlById,\n  //  getSongUrlById, \n  setSongList } from './store/playerSlice';\nimport './App.css';\nimport { IList } from '@/interfaces';\n\nconst Home = React.lazy(() => import('@pages/home'));\nconst Album = React.lazy(() => import('@pages/album'));\n\nfunction App(): JSX.Element {\n  const dispatch = useDispatch();\n  const [data] = useLocalStorage<IList[]>('cache-song-list', null)\n  // 初始化播放器数据\n  useEffect(() => {\n    if (data) {\n      // 载入缓存中的数据\n      dispatch(setSongList({ data }));\n      dispatch(getSongUrlById({ id: data[0].id, index: 0, autoPlay: false }))\n    }\n  }, [data, dispatch]);\n\n  return (\n    <Fragment>\n      <Router>\n        <React.Suspense fallback=\"加载中...\">\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/album/:id?\" exact component={Album} />\n          </Switch>\n        </React.Suspense>\n      </Router>\n      <PlayerBox />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from '@reduxjs/toolkit';\nimport playerReducer from './playerSlice';\n\nconst rootReducer = combineReducers({\n  player: playerReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport { useDispatch } from 'react-redux';\nimport rootReducer from './rootReducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: false,\n    // serializableCheck: {\n    //   ignoredActions: ['player/setAudio'], // redux推荐只将可序列化的数据存入store，该配置忽略了该规则，因为我们需要全局共享audio实例\n    // },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: process.env.NODE_ENV !== 'production',\n  middleware: process.env.NODE_ENV !== 'production' ? middleware : getDefaultMiddleware(),\n});\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').defult;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport './index.css';\n\nconst render = (): void => {\n  const App = require('./App').default;\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrender();\n\n// 热更新\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./App', render);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"a6LQ8jH5s49G351r4ry7A\",\"container\":\"_2Ex41Yg_HOsOU7-4IRjHd6\",\"backImg\":\"_2QytdlD314vM28E_GjkCsB\",\"content\":\"_2sVBbfzRY1t02kW6eFtVUL\",\"listBox\":\"_1Hhoot-IWJearnO66CCcGc\",\"item\":\"_1ipFW7xxMy_LMa93DRLtAm\",\"index\":\"_2ZaAShsI4txn8XRiKMSyNh\",\"songName\":\"_3Rd8d84-JHQMmWw5400qST\",\"songCreator\":\"_1ws7ebM5Qg-eWBGUyDKofa\",\"second\":\"_16OakXNbCl67ve9HL3mlJw\",\"canPlaying\":\"_3XqRWv2yA9kg7k6hWTjJR4\",\"lyricBox\":\"_35EbM6I0BzHk5Qtw_KG4iq\",\"noLyric\":\"_1-sA9-yTHUVggM-APKVpas\",\"head\":\"_2H1WObJgHWY9rZqdPvlqBV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hoverBox\":\"lxJgT-fjjXw_7rraI7bYO\",\"player\":\"_3DhximAgjXprNcUZvJJBb4\",\"audio\":\"_1Pe6zvjWU7bP1BxTzrxfas\",\"controller\":\"_25Bhje6NAFAFpknQ8HFM4R\",\"button\":\"rurHG8HbXrba9qsVi4f3_\",\"menu\":\"tgQynu_4eKMbG5-UX8NkB\",\"main\":\"_2LSEyGu8uCYgyGJBEVdlkJ\",\"coverImage\":\"_2pf_EtHe9NDw5Z8fvato1L\",\"spin\":\"_30ngn5ABA0-3TrCmuuUD_R\",\"rotate\":\"VV3QjzPv7HgLzppge8uuk\",\"content\":\"_2LqOGvkdyJ1x7e0HI66wJg\",\"head\":\"_1RbOSRgvGKJaxeyTPBFW7m\",\"progress\":\"G4ENEoFI9vPatAgt8CmgA\"};","import { createFromIconfontCN } from '@ant-design/icons';\n\nconst IconFont = createFromIconfontCN({\n  scriptUrl: '//at.alicdn.com/t/font_2060370_k34zyn39meh.js',\n});\n\nexport default IconFont;\n","import { useState, useRef, useEffect, useMemo, RefObject } from 'react';\nimport { useParams, useLocation, useHistory, useRouteMatch } from 'react-router-dom';\nimport queryString from 'query-string';\n\n// 缓存hook\nexport function useLocalStorage<T> (key:string, initialValue:T | null): [T, Function]{\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key)\n      return item ? JSON.parse(item) : initialValue\n    } catch(error) {\n      console.log(error)\n      return initialValue\n    }\n  })\n\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue): value\n      setStoredValue(valueToStore)\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch(error) {\n      console.log(error)\n    }\n  }\n  return [storedValue, setValue]\n}\n\n// 计时器hook\nexport const useInterval = (callback:Function, delay:number) => {\n  const savedCallback = useRef<Function | null>(null)\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback])\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current!();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\n// 路由\nexport function useRouter() {\n  const params = useParams()\n  const location = useLocation()\n  const history = useHistory()\n  const match = useRouteMatch()\n  return useMemo(() => {\n    return {\n      // For convenience add push(), replace(), pathname at top level\n      push: history.push,\n      replace: history.replace,\n      pathname: location.pathname,\n      // Merge params and parsed query string into single \"query\" object\n      // so that they can be used interchangeably.\n      // Example: /:topic?sort=popular -> { topic: \"react\", sort: \"popular\" }\n      query: {\n        ...queryString.parse(location.search), // Convert string to object\n        ...params,\n      },\n      // Include match, location, history objects so we have\n      // access to extra React Router functionality if needed.\n      match,\n      location,\n      history,\n    };\n  }, [params, match, location, history])\n}\n\n// 事件绑定hook\nexport function useEventListener<T extends HTMLElement = HTMLDivElement>(\n  eventName: string,\n  handler: Function,\n  element?: RefObject<T>,\n) {\n  // Create a ref that stores handler\n  const savedHandler = useRef<Function>()\n  useEffect(() => {\n    // Define the listening target\n    const targetElement: T | Window = element?.current || window\n    if (!(targetElement && targetElement.addEventListener)) {\n      return\n    }\n    // Update saved handler if necessary\n    if (savedHandler.current !== handler) {\n      savedHandler.current = handler\n    }\n    // Create event listener that calls handler function stored in ref\n    const eventListener = (event: Event) => {\n      // eslint-disable-next-line no-extra-boolean-cast\n      if (!!savedHandler?.current) {\n        savedHandler.current(event)\n      }\n    }\n    targetElement.addEventListener(eventName, eventListener)\n    // Remove event listener on cleanup\n    return () => {\n      targetElement.removeEventListener(eventName, eventListener)\n    }\n  }, [eventName, element, handler])\n}\n\n// 他出点击hook\nexport function useOnClickOutside<T extends HTMLElement = HTMLDivElement>(ref:RefObject<T>, handler: Function) {\n  useEffect(\n    () => {\n      const listener = (event: any) => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener('mousedown', listener);\n      document.addEventListener('touchstart', listener);\n\n      return () => {\n        document.removeEventListener('mousedown', listener);\n        document.removeEventListener('touchstart', listener);\n      };\n    },\n    // Add ref and handler to effect dependencies\n    // It's worth noting that because passed in handler is a new ...\n    // ... function on every render that will cause this effect ...\n    // ... callback/cleanup to run every render. It's not a big deal ...\n    // ... but to optimize you can wrap handler in useCallback before ...\n    // ... passing it into this hook.\n    [ref, handler]\n  );\n}\n\n\n\n// debug用hook\nexport function useWhyDidYouUpdate(name: string, props:any) {\n  // Get a mutable ref object where we can store props ...\n  // ... for comparison next time this hook runs.\n  const previousProps = useRef<any>(null);\n\n  useEffect(() => {\n    if (previousProps.current) {\n      // Get all keys from previous and current props\n      const allKeys = Object.keys({ ...previousProps.current, ...props });\n      // Use this object to keep track of changed props\n      const changesObj: any = {};\n      // Iterate through keys\n      allKeys.forEach(key => {\n        // If previous is different from current\n        if (previousProps.current[key] !== props[key]) {\n          // Add to changesObj\n          changesObj[key] = {\n            from: previousProps.current[key],\n            to: props[key],\n          };\n        }\n      });\n\n      // If changesObj not empty then output to console\n      if (Object.keys(changesObj).length) {\n        console.log('[why-did-you-update]', name, changesObj);\n      }\n    }\n\n    // Finally update previousProps with current props for next hook call\n    previousProps.current = props;\n  });\n}\n","import React from 'react';\nimport moment from 'moment';\n\ninterface IProps {\n  className?: string;\n  seconds: number;\n}\n\nconst getDate = (seconds: number) => {\n  return new Date(seconds * 1000);\n};\n\nconst Duration = (props: IProps) => {\n  return (\n    <span className={props.className}>\n      {moment(getDate(props.seconds)).utcOffset(0).format('mm:ss')}\n    </span>\n  );\n};\n\nexport default Duration;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playerBox\":\"_1URRVA-GI-BhQrZHYVMx7q\",\"lockBox\":\"_3x_32CtSBvIaSYOhs1xoFw\",\"locked\":\"_1KXt7a7thzbSV41Jrlm5r3\",\"player\":\"_2FmyDK_X0toHzM-xWlgwrg\"};","import { AxiosResponse, AxiosRequestConfig } from 'axios';\n\nconst axiosConfig: AxiosRequestConfig = {\n  baseURL: '/',\n  // 请求后的数据处理\n  transformResponse: [\n    function (data: AxiosResponse): AxiosResponse {\n      return data;\n    },\n  ],\n  timeout: 30000,\n  responseType: 'json',\n  // 最大响应数据大小\n  maxContentLength: 2000,\n  // 自定义错误状态码范围\n  validateStatus: function (status: number) {\n    return status >= 200 && status < 300;\n  },\n};\n\nexport default axiosConfig;\n","import axios, { AxiosRequestConfig } from 'axios';\nimport config from './config';\n\nconst pending: Array<{\n  url: string;\n  cancel: Function;\n}> = [];\n\nconst cancelToken = axios.CancelToken;\n\nconst removePending = (config: AxiosRequestConfig) => {\n  for (const p in pending) {\n    const item: any = p;\n    const list: any = pending[p];\n    // 当前请求在数组中存在时执行函数体\n    if (list.url === config.url + '&request_type=' + config.method) {\n      // 执行取消操作\n      list.cancel();\n      // 从数组中移除记录\n      pending.splice(item, 1);\n    }\n  }\n};\n\nconst request = axios.create(config);\n\n// 添加请求拦截器\nrequest.interceptors.request.use(\n  config => {\n    removePending(config);\n    config.cancelToken = new cancelToken(c => {\n      pending.push({\n        url: config.url + '&request_type=' + config.method,\n        cancel: c,\n      });\n    });\n    return config;\n  },\n  error => {\n    return Promise.reject(error);\n  },\n);\n\n// 返回状态判断(添加响应拦截器)\nrequest.interceptors.response.use(\n  res => {\n    removePending(res.config);\n    return res;\n  },\n  error => {\n    return Promise.reject(error);\n  },\n);\n\nexport default request;\n","import request from './request';\nimport { AxiosResponse } from 'axios';\nconst baseUrl = 'https://api.xujianfeng.club';\n\n/**\n * 获取首页轮播图\n * @param {string} type [0:pc;1:android;2:iphone;3:ipad]\n */\nfunction getBanner(type: number): Promise<AxiosResponse> {\n  return request.get(`${baseUrl}/banner?type=${type}`);\n}\n\n/**\n * 获取歌单分类\n */\nfunction getCatlist(): Promise<AxiosResponse> {\n  return request.get(`${baseUrl}/playlist/catlist`);\n}\n\n/**\n * 获取歌单分类\n */\nfunction getHotCatlist(): Promise<AxiosResponse> {\n  return request.get(`${baseUrl}/playlist/hot`);\n}\n\n// 歌单查询参数\ninterface AlbumArg {\n  limit: number;\n  cat: string;\n  offset: number;\n  order?: string;\n}\n\n/**\n * 获取歌单\n */\nfunction getAlbumList({ limit, cat, offset = 0, order = 'hot' }: AlbumArg): Promise<AxiosResponse> {\n  return request.get(\n    `${baseUrl}/top/playlist/?limit=${limit}&order=${order}&offset=${offset}&cat=${cat}`,\n  );\n}\n\n/**\n * 获取（歌单）专辑 详情\n * @param {string} id\n */\nfunction getAlbumDetail(id: string): Promise<AxiosResponse> {\n  return request.get(`${baseUrl}/playlist/detail?id=${id}`);\n}\n\n/**\n * 获取歌曲列表\n * @param {string} id\n */\nfunction getSongList(ids: string): Promise<AxiosResponse> {\n  return request.get(`${baseUrl}/song/detail?ids=${ids}`);\n}\n\n/**\n * 获取歌曲播放链接\n * @param {number} id\n */\nfunction getSongUrl(id: number): Promise<AxiosResponse> {\n  return request.get(`${baseUrl}/song/url?id=${id}`);\n}\n\n/**\n * 获取歌曲歌词\n * @param {number} id\n */\nfunction getSongLyric(id: number): Promise<AxiosResponse> {\n  return request.get(`${baseUrl}/lyric?id=${id}`);\n}\n\nexport {\n  getBanner,\n  getCatlist,\n  getHotCatlist,\n  getAlbumList,\n  getAlbumDetail,\n  getSongList,\n  getSongUrl,\n  getSongLyric,\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"_1y9RWNpnFF9NnWRjrpfKOK\",\"scrollContent\":\"_1lIo99iXuF_CW3FF83M_DZ\",\"scrollBar\":\"_1_rEIrL1zBBv65zuNSJ9E7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lyrContainer\":\"_1a6TKPrmA2yA-mdG0ocUF7\",\"line\":\"_3xHnyZFn_a2C6Pr6h7xKOP\",\"active\":\"Uiru2n3655rzFDIkKA2BE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"volume\":\"_14kz-6xQSn7TCbxYi2SFtB\",\"content\":\"UhJJOr8LRnntL8T0glbT2\"};"],"sourceRoot":""}